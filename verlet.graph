#import "vector2.graph";

Vector2i :: struct {
    x: int;
    y: int;
}

Timer :: struct {
    elapsed: float;
    time: float;
    looping: bool;
}

timer_start :: (time: float) -> Timer {
    <-{ 0., time, false };
}

timer_update :: (timer: *Timer, delta: float){
    timer.elapsed = timer.elapsed + delta;
}

timer_complete :: (timer: *Timer) -> bool {
    complete := timer.elapsed > timer.time;
    if complete and timer.looping timer.elapsed = 0.;
    <- complete;
}

Circle :: struct {
    centre: Vector2;
    radius: float;
}

Color :: struct {
    r: float;
    g: float;
    b: float;
    a: float;
}

set_color :: (color: *Color){
    extern_set_colour(color.r, color.g, color.b, color.a);
}

get_mouse_position :: () -> Vector2i {
    <- { get_mouse_x(), get_mouse_y() };
}

Ball :: struct {
    position: Vector2;
    previous_position: Vector2;
    acceleration: Vector2;
    radius: float;
}

accelerate :: (ball: *Ball, a: *Vector2){
    ball.acceleration = ball.acceleration + a;
}

update_position :: (ball: *Ball, delta: float){
    velocity : Vector2 = ball.position - ball.previous_position;
    ball.previous_position = ball.position;
    ball.position = ball.position + velocity + ball.acceleration * (delta * delta);
    ball.acceleration = { 0. , 0. };
}

constrain_to_circle :: (ball: *Ball, circle: *Circle){
    displacement := ball.position - circle.centre;
    if length(displacement) > circle.radius - ball.radius {
        ball.position = circle.centre + normalized(displacement) * (circle.radius - ball.radius);
    }
}

collide :: (a: *Ball, b: *Ball){
    if a == b <-;
    axis := a.position - b.position;
    distance := length(axis);
    total_radius := a.radius + b.radius;
    if distance < total_radius {
        normal := axis / distance;
        overlap : float = total_radius - distance;
        offset := normal * (.5 * overlap);
        a.position = a.position + offset;
        b.position = b.position - offset;
    }
}

get_balls :: () -> [120]Ball {
    balls: [120]Ball;
    i := 1;
    row := 0;
    column := 0;
    spacing := 5.;
    for ball in balls {
        ball.radius = 10.;

        if column == 10 {
            row = row + 1;
            column = 0;
        }
        ball.position = { 400. + float(column) * (ball.radius * 2.0 + spacing), 500. + float(row) * (ball.radius * 2.0 + spacing) };
        val: Vector2 = { .0001, .0001 };
        ball.previous_position = ball.position + val;
        ball.acceleration = { 0., 9.81 };
        column = column + 1;
        i = i + 1;
    }
    <- balls;
}

compute_pi :: () -> float {
    n := 1.;
    s := 1.;
    pi := 0.;
    i := 0;
    while i < 10000 {
        pi = pi + 1. / (s * n);
        n = n + 2.;
        s = -s;
        i = i + 1;
    }
    <- pi * 4.;
}

main :: () {

    window_width := 1500;
    window_height := 1000;

    open_window(window_width, window_height);

    // colours
    black:  Color = { 0., 0., 0., 1. };
    white:  Color = { 1., 1., 1., 1. };

    gravity: Vector2 = { 0. , 9.81 * 200. };

    balls := #run get_balls();

    environment: Circle = { { 500. , 500. }, 400. };

    start := time_seconds();
    delta := 0.;
    frames := 0;

    fps_timer := timer_start(1.0);
    fps_timer.looping = true;

    startup := true;

    while true {
        frames = frames + 1;
        timer_update(fps_timer, delta);

        if timer_complete(fps_timer) {
            print_int(frames); print("\n");
            frames = 0;
        }

        if mouse_down() {
            startup = false;
        }

        frame_begin();
        set_color(white);
        fill_rect(0, 0, window_width, window_height);

        set_color(black);
        fill_circle(int(environment.centre.x), int(environment.centre.y), int(environment.radius));

        set_color(white);

        mouse_position := get_mouse_position();
        environment.centre = { float(mouse_position.x), float(mouse_position.y) };

        i := 0;
        while i < 2 {

            // update
            if startup == false {
                for ball in balls {
                    accelerate(ball, gravity);
                }

                for ball in balls {
                    update_position(ball, delta / 2.0);
                    constrain_to_circle(ball, environment);
                }

            }
            for ball_a in balls {
                for ball_b in balls {
                  collide(ball_a, ball_b);
                }
            }

            i = i + 1;
        }


        // render
        for ball in balls {
            fill_circle(int(ball.position.x), int(ball.position.y), int(ball.radius));
        }

        draw();

        current := time_seconds();
        delta = current - start;
        start = current;
    }
}